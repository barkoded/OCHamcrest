name: Build
on: [ push, pull_request ]

env:
  project: Source/OCHamcrest.xcodeproj

jobs:
  build:
    name: Build without tests
    runs-on: macos-latest
    strategy:
      matrix:
        run-config:
          - { scheme: 'OCHamcrest-iOS', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 8' }
          - { scheme: 'OCHamcrest-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }
          - { scheme: 'OCHamcrest-watchOS', sdk: 'watchsimulator', destination: 'platform=watchOS Simulator,OS=latest,name=Apple Watch Series 5 - 44mm' }
    steps:
      - name: Check out project
        uses: actions/checkout@v2
      - name: Show current version of Xcode
        run: xcodebuild -version
      - name: Build
        run: set -o pipefail && xcodebuild build -project '${{ env.project }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty

  test:
    name: Build, test, report coverage
    runs-on: macos-latest
    env:
      scheme: OCHamcrest
      sdk: macosx
    steps:
      - name: Check out project
        uses: actions/checkout@v2
      - name: Show current version of Xcode
        run: xcodebuild -version
      - name: Build & test
        run: xcodebuild test -project '${{ env.project }}' -scheme '${{ env.scheme }}' -sdk '${{ env.sdk }}' -resultBundlePath TestResults
      - name: Test report
        uses: kishikawakatsumi/xcresulttool@v1.0.3
        with:
          path: TestResults.xcresult
        if: success() || failure()
      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle config set --local without 'documentation'
          bundle install --jobs 4 --retry 3
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch
      - name: Report coverage
        run: bundle exec slather
        env:
          GIT_BRANCH: ${{ steps.get_branch.outputs.branch }}
          CI_PULL_REQUEST: ${{ github.event.number }}
          COVERAGE_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  buildSwiftPackage:
    name: Build Swift package
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cd Source; swift build -v

  podspec:
      name: Pod Spec Lint
      runs-on: macos-latest
      steps:
        - name: Check out project
          uses: actions/checkout@v2
        - name: Lint the pod spec
          run: pod spec lint --quick
